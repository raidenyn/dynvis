using System;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Diagnostics;

namespace DynVis.Core
{
	/// <summary>
	/// Статический класс, предназначенный для распознавания режима работы -
	/// design-time/run-time.</summary>
	/// <remarks>Этот класс написан по причине того, что в некоторых случаях, когда форма (компонент) создается
	/// в дизайнере, нельзя определить режим (поскольку <see cref="IComponent.Site"/> равен null).</remarks>
	public static class DesignerDetector
	{
		#region Const
		/// <summary>
		/// Номер фрейма стека, начиная с которого ищем <see cref="sm_Interface_Match"/>.</summary>
		/// <remarks>Чем больше число, тем быстрее будем искать (но менее надежно).</remarks>
		private const int START_FRAME = 4;
		#endregion // Const
		#region Static
		#region Fields
		/// <summary>
		/// В методе <see cref="IsComponentInDesignMode"/> происходит
		/// поиск по стеку вызовов типа, который реализует данный интерфейс (<see cref="IDesignerHost"/>).</summary>
		private static readonly Type sm_Interface_Match = typeof(IDesignerHost);
		#endregion // Fields
		#region Methods
		/// <summary>
		/// Проверяет, находится ли компонент в режиме дизайна.</summary>
		/// <param name="component">Компонент.</param>
		/// <returns>true, если компонент открыт в дизайнере.</returns>
		/// <remarks>В этом методе происходит
		/// поиск по стеку вызовов типа, который реализует интерфейс (<see cref="sm_Interface_Match"/>).</remarks>
		public static bool IsComponentInDesignMode(IComponent component)
		{
			// вдруг все просто?
			if( component.Site != null )
			{
				return component.Site.DesignMode;
			}
			// теперь все уже не так просто...
			var _stackTrace = new StackTrace();
			int _iFrameCount = _stackTrace.FrameCount - 1;
			// пробегаем стек вызовов, пока не найдем тип, реализующий интерфейс IDesignerHost
			for( int _iFrame = START_FRAME; _iFrame < _iFrameCount; _iFrame++ )
			{
				Type _type_FromStack = _stackTrace.GetFrame(_iFrame).GetMethod().DeclaringType;
				if( sm_Interface_Match.IsAssignableFrom(_type_FromStack) )
				{
					return true;
				}
			}
			// маленький стек вызовов или отсутствие IDesignerHost не характерно для дизайнеров
			return false;
		}
		#endregion // Methods
		#endregion // Static
		#region Constructors

	    #endregion // Constructors
	} // DesignerDetector
}
